openapi: 3.1.0
info:
  title: Ecommerce API
  description: API documentation for Ecommerce system (admin and user roles)
  version: "1.0.0"
servers:
  - url: http://localhost:8080/api
    description: Local server

tags:
  - name: Auth
  - name: Address
  - name: Cart
  - name: Category
  - name: Discount
  - name: Order
  - name: Payment
  - name: Product
  - name: Review
  - name: User

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Email already exists

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /addresses:
    post:
      tags: [Address]
      summary: Add a new address for current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Address added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
     
      # Role: USER

    get:
      tags: [Address]
      summary: Get all addresses of current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
      # Role: USER

  /addresses/{id}:
    put:
      tags: [Address]
      summary: Update address by ID for current user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Updated address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
      # Role: USER

    delete:
      tags: [Address]
      summary: Delete address by ID for current user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Address deleted successfully
      # Role: USER

  /cart:
    get:
      tags: [Cart]
      summary: Get current user's cart items
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
      # Role: USER

  /cart/add:
    post:
      tags: [Cart]
      summary: Add product to cart for current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
      # Role: USER

  /cart/remove/{productId}:
    delete:
      tags: [Cart]
      summary: Remove product from cart for current user
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Updated cart after removal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
      # Role: USER

  /cart/update:
    put:
      tags: [Cart]
      summary: Update quantity of product in cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
      # Role: USER

  /cart/clear:
    delete:
      tags: [Cart]
      summary: Clear all items in user's cart
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Cart cleared successfully
      # Role: USER

  /categories:
    post:
      tags: [Category]
      summary: Add a new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Created category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      # Role: ADMIN

    get:
      tags: [Category]
      summary: Get all categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      # Role: USER or ADMIN

  /categories/{id}:
    put:
      tags: [Category]
      summary: Update category by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      # Role: ADMIN

    delete:
      tags: [Category]
      summary: Delete category by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted
      # Role: ADMIN

    get:
      tags: [Category]
      summary: Get category by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      # Role: USER or ADMIN

  /discounts/product/{productId}:
    post:
      tags: [Discount]
      summary: Create discount for product
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema: {type: integer}
        - in: query
          name: code
          schema: {type: string}
          required: true
        - in: query
          name: value
          schema: {type: number, format: double}
          required: true
        - in: query
          name: isPercentage
          schema: {type: boolean}
          required: true
        - in: query
          name: startDate
          schema: {type: string}
          required: true
        - in: query
          name: endDate
          schema: {type: string}
          required: true
      responses:
        '200':
          description: Discount created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
      # Role: ADMIN

    get:
      tags: [Discount]
      summary: List discounts by product
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema: {type: integer}
      responses:
        '200':
          description: List of discounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Discount'
      # Role: USER or ADMIN

  /discounts/product/{productId}/price:
    get:
      tags: [Discount]
      summary: Compute effective price of product with discount
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema: {type: integer}
        - name: basePrice
          in: query
          required: true
          schema: {type: number, format: double}
      responses:
        '200':
          description: Effective price
          content:
            application/json:
              schema:
                type: number
                format: double
      # Role: USER or ADMIN

  /discounts/{discountId}:
    delete:
      tags: [Discount]
      summary: Delete discount
      security:
        - bearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          schema: {type: integer}
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                type: string
      # Role: ADMIN

  /orders:
    get:
      tags: [Order]
      summary: Get all orders (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
      # Role: ADMIN

    post:
      tags: [Order]
      summary: Place order and pay (User only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Order placed with payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
      # Role: USER

  /orders/admin/{id}:
    get:
      tags: [Order]
      summary: Get order by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      # Role: ADMIN

  /orders/{id}/status:
    put:
      tags: [Order]
      summary: Update order status (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: integer}
        - name: status
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      # Role: ADMIN

  /orders/my:
    get:
      tags: [Order]
      summary: Get orders of current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
      # Role: USER

  /orders/{id}:
    delete:
      tags: [Order]
      summary: Cancel order (User only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: integer}
      responses:
        '204':
          description: Order canceled successfully
      # Role: USER

  /payments/{paymentId}:
    get:
      tags: [Payment]
      summary: Get payment details
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

  /payments/order/{orderId}:
    post:
      tags: [Payment]
      summary: Create payment for order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema: {type: integer}
        - name: method
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaymentMethod'
        - name: amount
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: transactionId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

  /payments/{paymentId}/status:
    put:
      tags: [Payment]
      summary: Update payment status
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path
          required: true
          schema: {type: integer}
        - name: status
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PaymentStatus'
      responses:
        '200':
          description: Updated payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

  /products:
    post:
      tags: [Product]
      summary: Add new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      # Role: ADMIN

    get:
      tags: [Product]
      summary: Get all products
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      # Role: USER or ADMIN

  /products/{id}:
    put:
      tags: [Product]
      summary: Update product by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      # Role: ADMIN

    delete:
      tags: [Product]
      summary: Delete product by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted
      # Role: ADMIN

    get:
      tags: [Product]
      summary: Get product by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      # Role: USER or ADMIN

  /reviews:
    post:
      tags: [Review]
      summary: Add a review
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
      responses:
        '200':
          description: Created review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

    get:
      tags: [Review]
      summary: Get reviews filtered by product or user
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: query
          required: false
          schema:
            type: integer
        - name: userId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of reviews matching query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Bad request if no filter provided

  /reviews/{reviewId}:
    delete:
      tags: [Review]
      summary: Delete a review by ID (current user only)
      security:
        - bearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Review deleted successfully

  /users:
    get:
      tags: [User]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      # Role: ADMIN

  /users/admin/{id}:
    get:
      tags: [User]
      summary: Get user by ID (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      # Role: ADMIN

    delete:
      tags: [User]
      summary: Delete user by ID (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
      # Role: ADMIN

  /users/me:
    get:
      tags: [User]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      # Role: USER

    put:
      tags: [User]
      summary: Update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      # Role: USER

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        roles:
          type: array
          items:
            type: string
        # Add other user fields as per your entity
      required:
        - email
        - password

    AuthRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
        roles:
          type: array
          items:
            type: string

    Address:
      type: object
      properties:
        id:
          type: integer
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipcode:
          type: string
        country:
          type: string

    CartItemRequest:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer
      required:
        - productId
        - quantity

    CartItem:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: double

    Cart:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string

    Discount:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        value:
          type: number
          format: double
        isPercentage:
          type: boolean
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    Order:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        userId:
          type: integer
        totalAmount:
          type: number
          format: double
        # Further order fields can be added

    PaymentRequest:
      type: object
      properties:
        method:
          $ref: '#/components/schemas/PaymentMethod'
        amount:
          type: number
          format: double
        transactionId:
          type: string
      required:
        - method
        - amount
        - transactionId

    OrderResponse:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
        payment:
          $ref: '#/components/schemas/Payment'

    Payment:
      type: object
      properties:
        id:
          type: integer
        orderId:
          type: integer
        method:
          $ref: '#/components/schemas/PaymentMethod'
        amount:
          type: number
          format: double
        transactionId:
          type: string
        status:
          $ref: '#/components/schemas/PaymentStatus'

    PaymentMethod:
      type: string
      enum:
        - CREDIT_CARD
        - DEBIT_CARD
        - PAYPAL
        - STRIPE
        - BANK_TRANSFER

    PaymentStatus:
      type: string
      enum:
        - PENDING
        - COMPLETED
        - FAILED
        - CANCELED

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        categoryId:
          type: integer

    ReviewRequest:
      type: object
      properties:
        productId:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
      required:
        - productId
        - rating

    Review:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        userId:
          type: integer
        rating:
          type: integer
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
